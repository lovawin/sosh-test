import React, { useCallback, useEffect, useState } from "react";
import PropTypes from "prop-types";

import { StyledPostCard } from "./style";
import { Link, useLocation } from "react-router-dom";
import Routes from "constants/routes";

import { deleteAsset, likeAsset } from "services/assetsServices";
import { apiHandler } from "services/axios";
import marketplaceLogger from "services/marketplaceLogger";
import errorLogger from "services/errorLogger";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { contactInstance } from "../../../common/methodInstance";
import LikeButton from "components/likeButton";
import ShareButton from "components/shareButton";
import DeleteButton from "components/deleteButton";
import EllipsedText from "components/EllipsedText";
import ImageComponent from "components/ImageComponent";
import { openConfirmModal } from "store/commonStore/actionCreator";
import ThreeDotIcon from "assets/icons/threeDotIcon";
import ModalForSellNFT from "components/ModalForSellNFT/ModalForSellNFT";
import CustomButton from "components/CustomButton";
import { setLoading, unSetLoading } from "store/Actions/data";
import { CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE } from "common/config721MarketPlace";
import EditIcon from "assets/icons/editIcon";

function PostCard({ data, linkable = true, isLoggedInProfile, onDelete }) {
  console.log("data from Post Card", data);
  const [cardData, setCardData] = useState(data || {});
  const [isEditable, setIsEditable] = useState(false);

  const { isLogin, address } = useSelector((state) => state.login);
  const [isApprove, setIsApprove] = useState(false);
  const [isLikeUpdating, setIsLikeUpdating] = useState(false);
  const [isDeleteInProgress, setIsDeleteInProgress] = useState(false);
  const [isEditPrice, setIsEditPrice] = useState(false);
  const dispatch = useDispatch();
  const calculateTimeLeft = useCallback(() => {
    const now = new Date().getTime();
    const start = new Date(data?.startTime * 1000).getTime();
    const end = new Date(data?.endTime * 1000).getTime();
    let timeLeft = {};
    let message = "";

    if (start > now) {
      const difference = start - now;

      timeLeft = {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
      message = "Sales start in";
    } else if (end > now) {
      const difference = end - now;
      timeLeft = {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };

      message = "Sale ends in";
    }

    // setPrevMessage(message);

    return { timeLeft, message };
  }, [data?.endTime, data?.startTime]);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);

    return () => clearInterval(timer);
  }, [data.startTime, data.endTime, calculateTimeLeft]);

  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

  const location = useLocation();

  useEffect(() => {
    if (
      location?.search?.includes("sale=true") &&
      timeLeft?.message === "Sales start in"
    ) {
      setIsEditable(true);
    } else {
      setIsEditable(false);
    }
  }, [location?.search, timeLeft?.message]);
  console.log(location, "LOCATION   ");
  const [showModal, setShowModal] = useState(false);

  const handleClose = () => {
    setShowModal(false);
  };

  console.log("timeLeft", timeLeft);

  useEffect(() => {
    setCardData(data);
  }, [data]);

  const startDeleteProgress = useCallback(() => {
    setIsDeleteInProgress(true);
  }, []);
  const stopDeleteProgress = useCallback(() => {
    setIsDeleteInProgress(false);
  }, []);

  const startLikeUpdate = useCallback(() => {
    setIsLikeUpdating(true);
  }, []);

  const stopLikeUpdate = useCallback(() => {
    setIsLikeUpdating(false);
  }, []);

  const likeAndDislikeAsset = () => {
    if (!isLogin) {
      toast("Please Connect Wallet");
      return true;
    }
    startLikeUpdate();

    apiHandler(() => likeAsset(cardData?._id, !cardData?.liked), {
      onSuccess: (data) => {
        setCardData((prevState) => ({
          ...prevState,
          liked: data?.asset?.liked,
          likedBy: data?.asset?.likedBy,
        }));
      },
      onError: () => {
        toast("Failed to like NFT", {
          type: "error",
        });
      },
      final: () => {
        stopLikeUpdate();
      },
    });
  };

  const handleDelete = useCallback(
    async (id, tokenId) => {
      startDeleteProgress();
      try {
        const burn = await contactInstance()
          .methods.burnToken()
          .call({ from: address });
        console.log(burn, "burn");
        apiHandler(() => deleteAsset(id), {
          onSuccess: (data) => {
            onDelete && onDelete(cardData?._id, data);
            toast("Asset Deleted", {
              type: "success",
            });
          },
        });
      } catch (err) {
        console.error(err);
        toast("Failed to delete NFT", {
          type: "error",
        });
      } finally {
        stopDeleteProgress();
      }
    },
    [address, startDeleteProgress, stopDeleteProgress, cardData, onDelete]
  );

  const deleteClickHandler = useCallback(() => {
    startDeleteProgress();
    dispatch(
      openConfirmModal({
        onConfirm: () => handleDelete(cardData?._id, cardData?.token_id),
        onCancel: stopDeleteProgress,
        message: "Are you sure you want to delete this NFT?",
        confirmLabel: "Delete",
        type: "delete",
      })
    );
  }, [
    dispatch,
    handleDelete,
    startDeleteProgress,
    stopDeleteProgress,
    cardData,
  ]);
  const getApprove = useCallback(async () => {
    try {
      console.log("data Resign", data, data?.token_id);

      const getApproval = await contactInstance()
        .methods.getApproved(data?.token_id)
        .call({ from: address });

      console.log(getApproval, address, data, "burn for get approve");
      if (
        getApproval !== address &&
        getApproval !== CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE
      ) {
        setIsApprove(true);
      }
    } catch (err) {
      console.error(err);
    } finally {
    }
  }, [address, data]);
  useEffect(() => {
    console.log("data access", data);
  }, [data]);
  const handleApprove = useCallback(async () => {
    try {
      dispatch(setLoading());

      // Log approval attempt
      await marketplaceLogger.logApprovalAttempt(
        data?.token_id,
        CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE,
        { userAddress: address }
      );

      const Contract = contactInstance();

      const approve = await Contract.methods
        .approve(CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE, data?.token_id)
        .send({ from: address });

      console.log(approve, data, "burn");
      
      // Log approval success
      await marketplaceLogger.logApprovalResult(
        data?.token_id,
        true,
        { 
          transactionHash: approve.transactionHash,
          marketplaceAddress: CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE
        }
      );
      
      if (approve) {
        window.location.reload();
      }
    } catch (err) {
      console.error(err);
      
      // Log approval failure
      await marketplaceLogger.logApprovalResult(
        data?.token_id,
        false,
        { error: { message: err.message, code: err.code } }
      );
      
      // Log transaction error with details
      await marketplaceLogger.logTransactionError(
        data?.token_id,
        err,
        'APPROVAL',
        { 
          marketplaceAddress: CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE,
          userAddress: address
        }
      );
      
      // Also log to error logs
      errorLogger.logError(err, {
        type: 'MARKETPLACE_TRANSACTION_ERROR',
        subType: 'APPROVAL',
        context: {
          tokenId: data?.token_id,
          marketplaceAddress: CUSTOM_TOKEN_ADDRESS_721_MARKET_PLACE,
          userAddress: address
        }
      });
      
      toast("Failed to Approve!", {
        type: "error",
      });
      dispatch(unSetLoading());
    } finally {
      dispatch(unSetLoading());
    }
  }, [address, data, dispatch]);

  useEffect(() => {
    getApprove();
  }, [getApprove]);

  return (
    <StyledPostCard>
      <div className="post-image-wrapper">
        <ImageComponent
          src={cardData?.image}
          alt={cardData?.name}
          aspectRatio={1.18}
        />

        <img
          alt={cardData?.platform_type}
          className="social-image"
          src={`/img/${cardData?.platform_type?.toLowerCase()}.svg`}
        />

        {linkable && (
          <Link
            className="post-link"
            to={`${Routes.nftDetail}/${data._id}`}
          ></Link>
        )}
      </div>
      <div className="details-container">
        <div className="info-wrapper">
          <p className="name">{cardData?.name}</p>
          <p className="desc">
            <EllipsedText text={cardData?.description} maxLength={30} />
          </p>
        </div>

        {/* <span className="icon-wrap">
          <MenuKebabIcon />
        </span> */}
        {/* <CustomDropDown
          toggleElement={
            <div className="menu-icon-wrap">
              <MenuKebabIcon />
            </div>
          }
          menuItems={[
            {
              label: "Share NFT",
              icon: ShareIcon,
              // action: shareClickHandler,
            },
            {
              label: "Delete NFT",
              icon: ShareIcon,
              // action: shareClickHandler,
            },
          ]}
        /> */}
        {isApprove && (
          <CustomButton
            onClick={() => handleApprove()}
            color="gradient"
            className="follow-button"
            $fontSize="0.8rem"
          >
            Approve Marketplace
          </CustomButton>
        )}
      </div>
      <div className="actions-container">
        <hr style={{ color: "gray" }} />

        <ShareButton
          text={cardData.name}
          longText={cardData.description}
          link={`${window?.location?.origin}${Routes.nftDetail}/${cardData._id}`}
        />

        <LikeButton
          isLiked={cardData?.liked}
          count={cardData?.likedBy?.length}
          onClick={likeAndDislikeAsset}
          loading={isLikeUpdating}
          disabled={isLikeUpdating}
        />

        {isLoggedInProfile && (
          <DeleteButton
            loading={isDeleteInProgress}
            onClick={deleteClickHandler}
          />
        )}

        {/* {isLoggedInProfile && !isApprove && (
          <div className="three-dot" onClick={() => setShowModal(true)}>
            <ThreeDotIcon />
          </div>
        )} */}
        {isLoggedInProfile && !isApprove && (
          <CustomButton
            color="gradient"
            className="follow-button"
            $fontSize="0.8rem"
            onClick={() => setShowModal(true)}
          >
            List / Sell
          </CustomButton>
        )}
        {isLoggedInProfile && isEditable && (
          <div
            className="edit-icon"
            style={{
              top: !isApprove ? "-25px" : "-78px",
            }}
            onClick={() => {
              setIsEditPrice(true);
              setShowModal(true);
            }}
          >
            <EditIcon className="icon" />
          </div>
        )}
      </div>
      <ModalForSellNFT
        name={cardData?.name}
        token_id={data.token_id}
        showModal={showModal}
        isEditPrice={isEditPrice}
        handleClose={handleClose}
        data={data}
      />
    </StyledPostCard>
  );
}
/*  */
export default PostCard;

PostCard.propTypes = {
  data: PropTypes.object,
  linkable: PropTypes.bool,
  onDelete: PropTypes.func,
};
