version: '2.4'

services:
  sosh_backend_app:
    container_name: sosh-backend-app
    image: sosh-backend-app:v1.0
    build:
      context: .
      args:
        NODE_ENV: production
    ports:
      - '5000:5000'
    volumes:
      - .:/server
    env_file:
      - ./config/prod/dev.env
    command: sh -c "npm install --legacy-peer-deps && npm run start"
    environment:
      - NODE_OPTIONS=--max-old-space-size=4096
      - NODE_ENV=production
      - REDIS_HOST=sosh-redis-db
      - REDIS_PORT=6379
    depends_on:
      sosh_mongo_db:
        condition: service_healthy
      sosh_redis_db:
        condition: service_healthy
      mongo-express:
        condition: service_started
    networks:
      - sosh_network
    restart: always

  sosh_mongo_db:
    container_name: sosh-mongo-db
    image: mongo:latest
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - sosh_mongo:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - sosh_network
    environment:
      - MONGO_INITDB_DATABASE=sosh
      - MONGO_INITDB_ROOT_USERNAME=soshadmin
      - MONGO_INITDB_ROOT_PASSWORD=VHUCTYXRTFYGJYFUTVHVYU
    command: mongod --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "-u", "soshadmin", "-p", "VHUCTYXRTFYGJYFUTVHVYU", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 60s

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - '8500:8081'
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://soshadmin:VHUCTYXRTFYGJYFUTVHVYU@sosh_mongo_db:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_SITE_BASEURL: '/api'
      ME_CONFIG_SITE_COOKIESECRET: 'cookiesecret'
      ME_CONFIG_SITE_SESSIONSECRET: 'sessionsecret'
      ME_CONFIG_REQUEST_SIZE: '100kb'
      ME_CONFIG_SITE_SSL_ENABLED: 'false'
      ME_CONFIG_SITE_CSRFPROTECTION: 'true'
    depends_on:
      sosh_mongo_db:
        condition: service_healthy
    networks:
      - sosh_network

  sosh_redis_db:
    container_name: sosh-redis-db
    image: redis:alpine
    restart: always
    command: redis-server /etc/redis/redis.conf
    ports:
      - '6381:6379'
    volumes:
      - ./redis.conf:/etc/redis/redis.conf:ro
      - ./users.acl:/etc/redis/users.acl:ro
    networks:
      - sosh_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  sosh_redis_commander:
    container_name: sosh-redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:sosh-redis-db:6379
    ports:
      - '5053:8081'
    networks:
      - sosh_network

  jenkins:
    container_name: jenkins-docker
    image: jenkins/jenkins:lts
    restart: always
    volumes:
      - /opt/docker/jenkins/data/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS="--prefix=/jenkins"
    networks:
      - sosh_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/jenkins"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  certbot:
    container_name: certbot
    image: certbot/certbot:v1.19.0
    restart: always
    volumes:
      - /opt/docker/apps/data/certbot/www:/var/www/certbot
      - /opt/docker/apps/data/certbot/conf:/etc/letsencrypt
    depends_on:
      - sosh_backend_app
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  sosh_nft_fe:
    container_name: frontend-update-sosh-nft-fe-1
    image: sosh-nft-fe:latest
    restart: always
    volumes:
      - /opt/docker/apps/data/certbot/conf:/etc/letsencrypt
      - /opt/docker/apps/data/certbot/www:/var/www/certbot
      - ../frontend-update/build:/usr/share/nginx/html
      - ../frontend-update/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - sosh_network

networks:
  sosh_network:
    driver: bridge

volumes:
  sosh_mongo:
