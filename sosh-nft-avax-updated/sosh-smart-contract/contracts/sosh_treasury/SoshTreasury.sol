// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

/**
 * @notice The Sosh treasury which collects fees generated by the market and minting contract.
 * @dev The core responsibility of this contract is collecting fees and access control.
 */

import "hardhat/console.sol";

contract SoshTreasury is
    Initializable,
    AccessControlUpgradeable,
    UUPSUpgradeable
{
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    event FundsWithdrawn(address indexed to, uint256 amount);

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    // Fallback function to receive Ether
    receive() external payable {}

    function initialize(address _soshSuperAdmin) public initializer {
        __UUPSUpgradeable_init();
        __AccessControl_init();
        _grantRole(DEFAULT_ADMIN_ROLE, _soshSuperAdmin);
        _grantRole(ADMIN_ROLE, _soshSuperAdmin);
    }

    /**
     * @dev onlyRole(DEFAULT_ADMIN_ROLE) is enforced by `grantRole`.
     */
    function grantAdminRole(address account) external {
        grantRole(ADMIN_ROLE, account);
    }

    /**
     * @dev onlyRole(DEFAULT_ADMIN_ROLE) is enforced by `revokeRole`.
     */
    function revokeAdminRole(address account) external {
        revokeRole(ADMIN_ROLE, account);
    }

    function isAdmin(address account) external view returns (bool) {
        return hasRole(ADMIN_ROLE, account);
    }

    function isSuperAdmin(address account) external view returns (bool) {
        return hasRole(DEFAULT_ADMIN_ROLE, account);
    }

    /**
     * @notice Allows a DEFAULT_ADMIN_ROLE to withdraw funds.
     *
     * @param to        Address to receive the withdrawn funds
     * @param amount    Amount to withdrawal
     */
    function withdrawFunds(
        address payable to,
        uint256 amount
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        if (amount == 0) {
            amount = address(this).balance;
        }

        (bool success, ) = to.call{value: amount}("");
        console.log("%%%%%%%%%%%%%%%%%%%%%%%",success);
        require(success, "Treasury: Withdraw failed");
        emit FundsWithdrawn(to, amount);
    }

    function _authorizeUpgrade(
        address newImplementation
    ) internal virtual override onlyRole(ADMIN_ROLE) {}
}
